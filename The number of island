class Solution {
     private:
    void bfs(int row , int col, vector<vector<int>>&vis , vector<vector<char>> &grid  ){
        vis[row][col] = 1 ;
        queue<pair<int , int>> q;
        q.push ({row , col});
        int n = grid.size();
        int m = grid[0].size();
        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            for(int delr = -1 ; delr <= 1 ; delr++){
                for(int delc = -1 ; delc <= 1 ; delc++){
                int nr = row + delr;
                int nc = col + delc;
                if(nr >= 0 && nr< n && nc>= 0 && nc<m && grid[nr][nc]=='1' && !vis[nr][nc]){
                    vis[nr][nc] = 1;
                    q.push({nr , nc});
                }
            }
            }
        }
        
    }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
         vector<vector<int>> vis(n , vector<int>(m , 0));
        int count = 0 ;
       for(int i= 0 ; i < n; i++){
           for(int j  = 0 ; j < m ; j++){
               if(!vis[i][j] && grid[i][j] == '1'){
               count++;
               bfs(i , j , vis , grid );
               }
           }
       }
       return count;
    }
};
