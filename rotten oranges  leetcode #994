class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<pair<int, int> , int>> q;
        vector<vector<int>> vis(n , vector<int>(m,0));
        for(int i = 0 ; i <n ; i++){
            for(int j = 0 ; j<m ; j++){
               if(grid[i][j]== 2){
                q.push({{i,j} , 0});
                vis[i][j] = 2;
               }
               else {
                vis[i][j] = 0;
               }
            }
        }
 int tm = 0 ;
 vector<int> dr = {-1 , 0 , +1, 0};
 vector<int> dc = {0 , +1 , 0 , -1};
 while(!q.empty()){
 int x = q.front().first.first;
 int y = q.front().first.second;
 int t = q.front().second;
 q.pop();
 tm = max(tm , t);
 for(int i = 0 ; i<4 ; i++){
    int nr = x + dr[i];
    int nc = y + dc[i];

    if(nr>=0 && nr<n && nc>=0 && nc<m && vis[nr][nc]==0 && grid[nr][nc]==1){
        q.push({{nr , nc} , t+1});
        vis[nr][nc]= 2;
    }
 }

 } 
 for(int i = 0 ; i < n; i++){
    for(int j = 0 ; j<m ; j++){
        if(vis[i][j]!=2 && grid[i][j]==1)
        return -1;
    } 
 }   
 return tm;
    }
};
